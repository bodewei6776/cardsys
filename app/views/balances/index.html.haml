= form_header(:title => "结算", :link => edit_order_path(@order))
= render :partial => "layouts/errors", :locals => { :target => @balance }

.form-horizontal.well
  .control-group
    %label.control-label 是否会员
    .controls
      = @order.is_member? ? "是" : "否" 


  .control-group
    %label.control-label 会员姓名
    .controls
      = @order.member_name

  - if @order.court_book_record
    .control-group
      %label.control-label 场地
      .controls
        = @order.court_book_record.description

  - if @order.members_card
    .control-group
      %label.control-label 会员卡
      .controls
        = @order.members_card.long_description


  = form_for @balance, :url => balances_path, :method => :post, :html => { :class => "form-horizontal well" } do |f|
    = f.hidden_field :order_id
    = hidden_field_tag :order_id, @order.id

    = table_header(:title => "结算记录", :link => "")
    %table.table.table-striped.table-bordered.table-condensed
      %thead
        %tr
          %th 编号
          %th 结算方式
          %th 原价
          %th 折后价格
          %th 结算时间
          %th 结算人
          %th 

      %tbody
        - @balances.each_with_index do |item ,index|
          %tr
            %td= index + 1
            %td= item.balance_way_desc
            %td= item.price
            %td= item.final_price
            %td= item.created_at.to_chinese_ymd
            %td= item.user.try(:login)
            %td= link_to "打印", print_balance_path(item)


        %tr
          %td= @balances.count + 1
          %td= f.select :balance_way, options_for_select(@order.possible_balance_ways, @balance.balance_way), {}, :class => "span2"
          %td= f.text_field :price, :id => "new_price_node", :class => "span1"
          %td= f.text_field :final_price, :id => "new_total_price_node", :class => "span1"
          %td 
          %td 
          %td= f.submit "结算", :class => "btn btn-primary"


    = table_header(:title => "商品列表", :link => "")

    %table.table.table-striped.table-bordered.table-condensed
      %thead
        %tr
          %th= check_box_tag "select_deselect_all", :id => "select_deselect_all"
          %th 名称
          %th 类型
          %th 数量/时间段
          %th 单价
          %th 总价
          %th 折扣
          %th 折后价格
          %th 受否结算

      %tbody
        = f.fields_for :order_items do |oi|
          %tr.table_items{:class => (oi.object.item.is_a? CourtBookRecord) ? "court" : "other_product"}
            %td= oi.check_box :checked, :class => "checkbox_marker" unless oi.object.balanced?
            %td= oi.object.name
            %td= oi.object.type_name
            %td= oi.object.quantity_or_time
            %td= oi.object.unit_money_price || "无"
            %td.total_cost
              %span= oi.object.total_cost
              = hidden_field_tag "total_count", oi.object.total_count, :class => "total_count_hidden" if oi.object.item.is_a?CourtBookRecord
              = hidden_field_tag "total_cost", oi.object.total_cost, :class => "total_cost_hidden"
            %td= oi.object.balanced? ? oi.object.discount : (oi.text_field :discount, :class => "discount span1")
            %td= oi.object.balanced? ? oi.object.price_after_discount : (oi.text_field :price_after_discount, :class => "price_after_discount span1" )
            %td= oi.object.balanced? ? "已结算" : "未结算"


:javascript
  function update_discount_value(field, price_node){
      var new_total_price_node = $("#new_total_price_node");
      var new_price_node = $("#new_price_node");
      var price = price_node.val();
      if(price == "")
        return;
      price = parseFloat(price);
      total_cost = parseFloat(price_node.parent().parent().find("td.total_cost span").text());

      if(isNaN(price)){
        alert('请正确输入数字!');
        return;
      }
    if(field == "price_after_discount"){
      if(price > total_cost){
        alert("折后价不能大于原价!");
        return;
      }
      else{
        price_node.parent().parent().find("input[type=check_box]").attr("checked", true);
        var closest_discount_node = price_node.parent().parent().find(".discount");
        closest_discount_node.val(price / total_cost * 10);
      }
    }
    else{
      if(price > 10.0 || price < 0.0){
        alert("折扣数需大于0并且小于10!");
        return;
      }
      else{
        //price_node.parent().parent().find(".checkbox_marker").attr("checked", "checked");
        var closest_price_after_discount_node = price_node.parent().parent().find(".price_after_discount");
        closest_price_after_discount_node.val(price * total_cost * 0.1);
      }
    }


    var total_money = 0;
    var original_total_money = 0
    $(".checkbox_marker:checked").each(function(index, node){
      total_money += parseFloat($(node).parent().parent().find(".price_after_discount").val()); 
      original_total_money += parseFloat($(node).parent().parent().find(".total_cost").text()); 
    })
    new_total_price_node.attr('value',total_money);
    new_price_node.attr('value', original_total_money);
  }

  $(document).ready(function(){
    $("#new_total_price_node, #new_price_node").focus(function(){ $(this).blur() });
    $("#select_deselect_all").change(function(){
      var select_deselect_all = $(this)
      select_deselect_all.parent().parent().parent().parent().find("input[type=checkbox]").each(function(index, node){
        if(select_deselect_all.attr('checked')){ $(node).attr("checked", true) } else{ $(node).attr("checked", false)}
      });
    })

    $(".discount").blur(function(){
      var price = $(this);
      update_discount_value("discount", price);
    });

    $(".price_after_discount").blur(function(){
      var price_after_discount = $(this);
      update_discount_value("price_after_discount", price_after_discount);
    });

    $("#balance_balance_way").change(function(){
      if($(this).val() == "counter"){
        $(".other_product .checkbox_marker").attr("checked", false);
        $(".other_product").hide(); 
        $(".court input[type*=text]").attr("disabled", true);
        var total_count = $(".court .total_count_hidden").val();
        var total_count_hidden_val = $(".court .total_count_hidden").val() + "次";
        $(".court span").text(total_count_hidden_val);
        $(".court .discount").val(10);
        $(".court .price_after_discount").val(total_count_hidden_val);
        $("#new_total_price_node").val(total_count);
        $("#new_price_node").val(total_count);
      }else{
        $(".other_product").show(); 
        $(".court input").attr("disabled", false);
        $(".court span").text($(".court .total_cost_hidden").val());
        $("#new_total_price_node").val("");
        $("#new_price_node").val("");
        $(".checkbox_marker").map(function(i, node){ $(node).attr("checked", false) });
      }
    });

    $(".checkbox_marker").change(function(){
      var marker = $(this);
      var price = marker.parent().parent().find(".discount");
      update_discount_value("discount", price);

      var price_after_discount = marker.parent().parent().find(".price_after_discount");
      update_discount_value("price_after_discount", price_after_discount);
    });

  })
